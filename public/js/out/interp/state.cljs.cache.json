["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$interp.state","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$empty-stack?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","~:line",4,"~:column",7,"~:end-line",4,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^E",[["~$state","~$stack"]]]]],"~:doc","Returns true if the stack is empty."],"^5","~$interp.state/empty-stack?","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",19,"~:method-params",["^E",[["^G","^H"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",4,"~:ret-tag","~$boolean","^B",4,"~:max-fixed-arity",2,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G","^H"]]]]],"^I","Returns true if the stack is empty."],"~$peek-stack",["^ ","^=",null,"^>",["^ ","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^@",9,"^A",7,"^B",9,"^C",17,"^D",["^E",["^F",["^E",[["^G","^H"]]]]],"^I","Returns the top item on a stack."],"^5","~$interp.state/peek-stack","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",17,"^K",["^E",[["^G","^H"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",9,"^O",["^4",["~$any","~$cljs.core/Keyword","~$clj-nil"]],"^B",9,"^Q",2,"^R",true,"^D",["^E",["^F",["^E",[["^G","^H"]]]]],"^I","Returns the top item on a stack."],"~$peek-stack-multiple",["^ ","^=",null,"^>",["^ ","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^@",17,"^A",7,"^B",17,"^C",26,"^D",["^E",["^F",["^E",[["^G","^H","~$n"]]]]],"^I","Returns the top n items on a stack. If there are less than n items on the\n  stack, returns the entire stack."],"^5","~$interp.state/peek-stack-multiple","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",26,"^K",["^E",[["^G","^H","~$n"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",17,"^O","~$cljs.core/LazySeq","^B",17,"^Q",3,"^R",true,"^D",["^E",["^F",["^E",[["^G","^H","~$n"]]]]],"^I","Returns the top n items on a stack. If there are less than n items on the\n  stack, returns the entire stack."],"~$pop-stack",["^ ","^=",null,"^>",["^ ","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^@",23,"^A",7,"^B",23,"^C",16,"^D",["^E",["^F",["^E",[["^G","^H"]]]]],"^I","Removes the top item of stack."],"^5","~$interp.state/pop-stack","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",16,"^K",["^E",[["^G","^H"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",23,"^O",["^4",["~$clj","^U"]],"^B",23,"^Q",2,"^R",true,"^D",["^E",["^F",["^E",[["^G","^H"]]]]],"^I","Removes the top item of stack."],"~$pop-stack-multiple",["^ ","^=",null,"^>",["^ ","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^@",28,"^A",7,"^B",28,"^C",25,"^D",["^E",["^F",["^E",[["^G","^H","~$n"]]]]],"^I","Removes the top n items of a stack. If there are less than n items on the\n  stack, pops the entire stack."],"^5","~$interp.state/pop-stack-multiple","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",25,"^K",["^E",[["^G","^H","~$n"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",28,"^O",["^4",["^11","^U"]],"^B",28,"^Q",3,"^R",true,"^D",["^E",["^F",["^E",[["^G","^H","~$n"]]]]],"^I","Removes the top n items of a stack. If there are less than n items on the\n  stack, pops the entire stack."],"~$push-to-stack",["^ ","^=",null,"^>",["^ ","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^@",34,"^A",7,"^B",34,"^C",20,"^D",["^E",["^F",["^E",[["^G","^H","~$item"]]]]],"^I","Pushes an item onto a stack."],"^5","~$interp.state/push-to-stack","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",20,"^K",["^E",[["^G","^H","^15"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",34,"^O",["^4",[null,"^11","^U"]],"^B",34,"^Q",3,"^R",true,"^D",["^E",["^F",["^E",[["^G","^H","^15"]]]]],"^I","Pushes an item onto a stack."],"~$push-to-stack-multiple",["^ ","^=",null,"^>",["^ ","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^@",41,"^A",7,"^B",41,"^C",29,"^D",["^E",["^F",["^E",[["^G","^H","~$items"]]]]],"^I","Pushes a list of items onto a stack, leaving them in the order they are in."],"^5","~$interp.state/push-to-stack-multiple","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",29,"^K",["^E",[["^G","^H","^18"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",41,"^O",["^4",["^11","^U"]],"^B",41,"^Q",3,"^R",true,"^D",["^E",["^F",["^E",[["^G","^H","^18"]]]]],"^I","Pushes a list of items onto a stack, leaving them in the order they are in."],"~$get-args-from-stacks",["^ ","^=",null,"^>",["^ ","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^@",48,"^A",7,"^B",48,"^C",27,"^D",["^E",["^F",["^E",[["^G","~$stacks"]]]]],"^I","Takes a state and a collection of stacks to take args from. If there are\n  enough args on each of the desired stacks, returns a map with keys\n  {:state :args}, where :state is the new state and :args is a list of args\n  popped from the stacks. If there aren't enough args on the stacks, returns\n  :not-enough-args without popping anything."],"^5","~$interp.state/get-args-from-stacks","^?","/Users/sungkwak/Desktop/prop-dev/interp-dev/git/interpush-code/src/interp/state.cljs","^C",27,"^K",["^E",[["^G","^1;"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",48,"^O","^11","^B",48,"^Q",2,"^R",true,"^D",["^E",["^F",["^E",[["^G","^1;"]]]]],"^I","Takes a state and a collection of stacks to take args from. If there are\n  enough args on each of the desired stacks, returns a map with keys\n  {:state :args}, where :state is the new state and :args is a list of args\n  popped from the stacks. If there aren't enough args on the stacks, returns\n  :not-enough-args without popping anything."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:args","~:not-enough-args","~:no-stack-item","~:state"]],"~:order",["^1C","^1D","^1A","^1B"]],"^I",null]